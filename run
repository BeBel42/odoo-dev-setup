#!/usr/bin/env bash

# Usage: this is a convenience script to quickly start and reload odoo.
# It was made to prevent tiresome, manual operations to reboot the containers.

set -e
set -u

error() {
	error_message="
$0 usage:
	-m | --module <module_name>
		Select the module to update / install.
	-d | --drop
		Drop the database to start on an empty session.
		This will automatically reinstall the module.
	-i | --install
		Installs the module in the database.
	-h | --help
		Show this help prompt."
	[[ "$1" = "" ]] || echo "$1" 1>&2
	echo "$error_message" 1>&2
}

# default values
drop=0
install=0
help=0
module=""
cmd="--dev all" # TODO add --nodev parameter to disable this

# parse script parameters
while [[ "$#" -gt 0 ]]; do
	case $1 in
	-m | --module)
		module="$2"
		shift
		;;
	-d | --drop) drop=1 && install=1 ;;
	-i | --install) install=1 ;;
	-h | --help) help=1 ;;
	*)
		error "Error: unknown parameter passed: \"$1\""
		exit 1
		;;
	esac
	shift
done

# show help prompt
if [[ $help = 1 ]]; then
	error ""
	exit 0
fi

# user did not mention module name (-m | --module <module_name>)
if [[ "$module" = "" ]]; then
	echo "Warning: missing module (-m) parameter.
         No module will be updated / installed." 1>&2
else    # seeing if installing (-i) or updating (-u) module
	if [[ $install = 1 ]]; then
		echo "\"$( ([[ $drop = 1 ]] && echo '--drop') || echo '--install')\"" \
			'has been specified. Adding "-i" to command'
		action="-i"
	else
		echo '"--install" has not been specified. Adding "-u" to command'
		action="-u"
	fi
	cmd="$cmd $action $module"
fi

echo "Shutting down everything"
docker compose down --remove-orphans

echo "Starting db container..."
docker compose up -d db

if [[ $drop = 1 ]]; then
	echo '"--drop" has been specified. Dropping postgres database...'
	docker compose exec db dropdb --user=odoo odoo \
		|| echo "Warning: failed to drop datatbase" 1>&2
fi

echo "Starting odoo container with \"$cmd\" parameters..."
docker compose run --service-ports odoo $cmd
