#!/usr/bin/env bash

# Usage: this is a convenience script to quickly start and reload odoo.
# It was made to prevent tiresome, manual operations to reboot the containers.

set -eu

project_dir=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
cd "$project_dir"

# Options that do not work in .odoorc
default_args="--dev=all --limit-time-real=0"

error() {
	error_message="
$0 usage:
	-m | --module <module_name>
		Select the module to update / install.
		It can also be a comma-separated module_name list.
	-d | --drop
		Drop the database to start on an empty session.
		This will automatically reinstall the module.
	-i | --install
		Installs the module in the database.
	-s | --stop
		Stop all containers
	-u | --upgrade
		Run upgrade scripts for module (specified with -m)
	-t | --test [-][tag][/module][:class][.method][[params]]
		Enables testing for filtered tests.
		The '-' specifies whether to include or to exclude matched tests.
		Example: -t :TestClass.test_func,/test_module,external
		It is also possible to provide parameters to a test method that supports
		them. Example: -t /web.test_js[mail]
	--checkout-community <branch>
		Checkout community repository to <branch>
	--checkout-enterprise <branch>
		Checkout enterprise repository to <branch>
	-c | --checkout <branch>
		Checkout all (unspecified) odoo repositories to <branch>
	-p | --pull
		Pull all odoo repositories to the latest changes.
		This will be executed after \"--checkout\" flags if both are specified.
	-b | --bash
	   Launches bash in the odoo container (e.g.: to use odoo-bin manually)
	--shell
	   Attaches a shell process to current odoo instance
	--template <template_name>
		Will drop the current db and refill it with <template_name>'s content
	--save-template <template_name>
		Will launch odoo, immediatly quit when odoo is done setting up the
		modules, then save the current db as <template_name>
	--drop-template <regex>
		Drops all db templates matching <regex>
	--db-list
		List all postgres databases
	--no-restart
		Runs command as 'docker exec' instead of stopping old containers and
		replacing them with a new 'docker run' instance.
	--odoo-help
		Show the help prompt from odoo-bin
	--debug
		Enables debugpy. May crash on live code change.
	--init-only
		Stops odoo after init (e.g.: to only set database)
	--setup
		Sets up the whole project + dependencies
	--odoo-version
		Show the odoo version
	-h | --help
		Show this help prompt."
	[[ "$1" = "" ]] || echo "$1" 1>&2
	echo "$error_message" 1>&2
}

# default values
drop=0
install=0
help=0
stop=0
module=""
test=""
demo=0
odoo_help=0
odoo_version=0
enable_debug=0
checkout_branch=""
checkout_community=""
checkout_enterprise=""
pull_branch=0
setup=0
template=""
save_template=""
drop_template_regex=""
cmd="$default_args"
db_list=0
upgrade=0
run_bash=0
init_only=0
shell=0
no_restart=0

# parse script parameters
while [[ "$#" -gt 0 ]]; do
	case $1 in
	-m | --module)
		module="$2"
		shift
		;;
	-t | --test)
		test="$2"
		shift
		;;
	--checkout-community)
		checkout_community="$2"
		shift
		;;
	--checkout-enterprise)
		checkout_enterprise="$2"
		shift
		;;
	-c | --checkout)
		checkout_branch="$2"
		shift
		;;
	--template)
		template="$2"
		shift
		;;
	--save-template)
		save_template="$2"
		shift
		;;
	--drop-template)
		drop_template_regex="$2"
		shift
		;;
	-p | --pull) pull_branch=1 ;;
	-b | --bash) run_bash=1 ;;
	-u | --upgrade) upgrade=1 ;;
	-d | --drop) drop=1 && install=1 ;;
	-i | --install) install=1 ;;
	-s | --stop) stop=1 ;;
	-D | --demo) demo=1 ;;
	--no-restart) no_restart=1 ;;
	--odoo-help) odoo_help=1 ;;
	--shell) shell=1 ;;
	--odoo-version) odoo_version=1 ;;
	--init-only) init_only=1 ;;
	--debug) enable_debug=1 ;;
	--db-list) db_list=1 ;;
	--setup) setup=1 ;;
	-h | --help) help=1 ;;
	*)
		error "Error: unknown parameter passed: \"$1\""
		exit 1
		;;
	esac
	shift
done

# show help prompt
if [[ $help = 1 ]]; then
	error ""
	exit 0
fi

# Will execute whenever the script finishes
on_script_exit() {
	odoo_icon_path="$project_dir/images/odoo_logo_small.png"
	if type notify-send 1>&2 2>/dev/null; then
		notify-send "Odoo" "Script execution finished" -t 2000 -u low -i "$odoo_icon_path"
	else
		echo "Warning: notify-send is not installed on your system. Notifications won't be sent." 1>&2
	fi
}
trap "on_script_exit" EXIT

compose_file="$project_dir"/docker/docker-compose.yml

# Setup the whole project
if [[ $setup = 1 ]]; then
	echo '"--setup" specified. Calling setup container...'
	docker compose -f "$compose_file" run --build setup
	# Files created from container are chowned to root. Let's change that
	echo "Setting owner of project to $USER..."
	sudo chown -R "$USER:$USER" .
	echo "Done setting up project."
	exit 0
fi

warn_user_if_needed() {
	cd "$project_dir/community" &&
		community_branch=$(git rev-parse --abbrev-ref HEAD)
	cd "$project_dir/enterprise" &&
		enterprise_branch=$(git rev-parse --abbrev-ref HEAD)
	cd "$project_dir"
	if ! [[ "$community_branch" == "$enterprise_branch" ]]; then
		echo -e "\e[33m" # start yellow text
		echo "Warning: community and enterprise branches differ.
	community_branch=$community_branch
	enterprise_branch=$enterprise_branch" 1>&2
		echo -e "\e[0m" # end yellow text
	fi
}

# everything related to git checkout and pull
handle_branch_switch() {
	# define the directories
	community_dir="$project_dir/community"
	enterprise_dir="$project_dir/enterprise"

	# default to "-c" value if not specified
	[[ "$checkout_community" = "" ]] && checkout_community="$checkout_branch"
	[[ "$checkout_enterprise" = "" ]] && checkout_enterprise="$checkout_branch"

	# define arrays for mapping of branches to directories
	dirs=("$community_dir" "$enterprise_dir")
	branches=("$checkout_community" "$checkout_enterprise")

	# check for unstaged or staged changes in git repositories
	for i in "${!dirs[@]}"; do
		dir="${dirs[$i]}"
		branch="${branches[$i]}"

		# no need to do anything for this dir
		if [[ $pull_branch = 0 && "$branch" = "" ]]; then
			echo "No need to do git operations for $dir"
			continue
		fi

		cd "$dir" || exit 1
		if ! git diff --cached --quiet; then
			echo "Error: you cannot pull/checkout when there are staged changes in $dir."
			cd - >/dev/null
			exit 1
		fi
		if ! git diff --quiet; then
			echo "Error: you cannot pull/checkout when there are unstaged changes in $dir."
			cd - >/dev/null
			exit 1
		fi
		cd - >/dev/null
	done

	# Switch branches in both repositories
	for i in "${!dirs[@]}"; do
		dir="${dirs[$i]}"
		branch="${branches[$i]}"
		cd "$dir" || exit 1
		if [[ $branch != "" ]]; then
			echo "Checking out $dir to $branch..."
			git checkout "$branch"
		fi
		if [[ $pull_branch = 1 ]]; then
			echo '"-p" has been specified.' "Pulling $dir to latest changes..."
			git pull --ff-only
		fi
		cd - >/dev/null
	done

	echo "Done Git operations."
}

# it's annoying me most of the time...
#warn_user_if_needed

# Do git operations if needed
if [[ $pull_branch = 1 ||
	"$checkout_community" != "" ||
	"$checkout_enterprise" != "" ||
	"$checkout_branch" != "" ]]; then
	handle_branch_switch
	exit 0
fi

# just stop everything
if [[ $stop = 1 ]]; then
	echo '"-s" has been specified. Stopping all running containers.'
	docker compose -f "$compose_file" down --remove-orphans && echo "Stopped all running containers."
	exit 0
fi

# user did not mention module name (-m | --module <module_name>)
if [[ "$module" = "" ]]; then
	echo "Warning: missing module (-m) parameter.
         No module will be updated / installed." 1>&2
else # seeing if installing (-i) or updating (-u) module
	if [[ $install = 1 ]]; then
		echo "\"$( ([[ $drop = 1 ]] && echo '--drop') || echo '--install')\"" \
			'has been specified. Adding "-i" to command'
		action="-i"
	else
		echo '"--install" has not been specified. Adding "-u" to command'
		action="-u"
	fi
	cmd="$cmd $action $module"
fi

if ! [[ "$test" = "" ]]; then
	echo '"-t" has been specified. Adding test arguments to cmd'
	cmd="$cmd --log-level=info --test-enable --test-tags=$test"
	if [[ "$module" = "" ]]; then
		echo "Warning: no module has been set to be \
			tracked (-m) or installed (-i). Tests may not work." 1>&2
	fi
fi

if [[ $demo = 1 ]]; then
	echo "-D has been specified. Enabling demo data"
	cmd="$cmd --without-demo=False"
else
	echo "Demo data is disabled"
	cmd="$cmd --without-demo=True"
fi

if [[ $upgrade = 1 ]]; then
	echo "-u has been specified. Enabling upgrade..."
	cmd="$cmd --upgrade-path=upgrade-util/src,upgrade/migrations --stop-after-init --log-level=info"
fi

if [[ $no_restart = 0 ]]; then
	echo "Shutting down everything"
	docker compose -f "$compose_file" down --remove-orphans

	echo "Starting db container..."
	docker compose -f "$compose_file" up -d db
fi

# Wait for database to be up
tries=1
while (! docker compose -f "$compose_file" exec db pg_isready) && [ $tries -lt 5 ]; do
	sleep 0.5
	tries=$(("$tries" + 1))
	echo "Checking database availability ($tries)..."
done
if [ $tries = 5 ]; then
	echo "Error: could not verify database availability" 1>&2
	exit 1
fi

if [[ $db_list = 1 ]]; then
	echo '"--db-list" has been specified. List of all postgres databases:'
	docker compose -f "$compose_file" exec db sh -c "psql --user=\$POSTGRES_USER -l"
	exit $?
fi

# prefix prepended to all created / deleted database templates
database_template_prefix="odoo_template_"

if ! [[ "$drop_template_regex" = "" ]]; then
	docker compose -f "$compose_file" exec db sh -c "psql --user=\$POSTGRES_USER -lqt | cut -d \| -f 1 | \
		grep -E '$database_template_prefix""$drop_template_regex' |
		xargs -n 1 dropdb --user=\$POSTGRES_USER --if-exists 2>/dev/null" &&
		echo "All matched templates have been deleted" ||
		echo "Warning: no template matched the given regex: $drop_template_regex" 1>&2
	exit 0
fi

if [[ $drop = 1 ]]; then
	echo '"--drop" has been specified. Dropping postgres database...'
	docker compose -f "$compose_file" exec db sh -c "dropdb --user=\$POSTGRES_USER \$POSTGRES_DB" &&
		echo "Database dropped" ||
		echo "Warning: failed to drop datatbase" 1>&2
fi

if ! [[ "$template" = "" ]]; then
	echo "\"--template\" has been specified. Copying template $template to current db..."
	(docker compose -f "$compose_file" exec db sh -c "
        dropdb --if-exists --user=\"\$POSTGRES_USER\" \"\$POSTGRES_DB\" && \
        createdb --user=\"\$POSTGRES_USER\" -T \"$database_template_prefix""$template\" \"\$POSTGRES_DB\"
    " && echo "Successfully copied template $template") ||
		(echo "Error: could not use template $template" 1>&2 && exit 1)
fi

if ! [[ "$test" = "" ]]; then
	echo '"-t" has been specified. Adding test arguments to cmd'
	cmd="$cmd --stop-after-init --log-level=info --test-enable --test-tags=$test"
	if [[ "$module" = "" ]]; then
		echo "Warning: no module has been set to be \
			tracked (-m) or installed (-i). Tests may not work." 1>&2
	fi
fi

if ! [[ "$save_template" = "" ]]; then
	echo '"--save-template" has been specified. Adding arguments to cmd'
	cmd="$cmd --stop-after-init --log-level=info"
fi

if [[ $init_only = 1 ]]; then
	echo '"--init-only" has been specified. Adding arguments to cmd'
	cmd="$cmd --stop-after-init --log-level=info"
fi

if [[ $odoo_version = 1 ]]; then
	echo '--odoo-version has been specified. Overriding parameters to --version'
	cmd="--version"
fi

if [[ $shell = 1 ]]; then
	echo '"--shell" has ben specified. Overriding parameters to "shell"'
	cmd="shell"
fi

if [[ $odoo_help = 1 ]]; then
	echo '--odoo-help has been specified. Overriding parameters to --help'
	cmd="--help"
fi

docker_entrypoint=""
docker_build="--build"
docker_run_exec="run"
# attach to process if no restart
if [[ $no_restart = 1 ]]; then
	echo "\"--no-restart\" has been specified. Changing \"docker run\" to \"docker exec\""
	docker_run_exec="exec"
	docker_build=""
fi
# remove cmd if using bash
if [[ $run_bash = 1 ]]; then
	echo "\"-b\" has been specified. Launching bash console from odoo container..."
	docker_entrypoint='--entrypoint="/bin/bash"'
	cmd=""
fi

echo "Starting odoo container with \"$cmd\" parameters..."
docker compose -f "$compose_file" $docker_run_exec $docker_build -e "ENABLE_DEBUG=$enable_debug" --service-ports $docker_entrypoint odoo $cmd

if [[ ! "$save_template" = "" ]]; then
	echo "--save-template specified. Saving db into template \"$save_template\""
	# Need to drop the old save template to avoid errors when overriding it
	docker compose -f "$compose_file" exec db sh -c "dropdb --if-exists --user=\"\$POSTGRES_USER\" '$database_template_prefix""$save_template' 2>/dev/null" ||
		echo "Warning: failed to drop old \"$save_template\" template" 1>&2
	docker compose -f "$compose_file" exec db sh -c "createdb --user=\"\$POSTGRES_USER\" -T \"\$POSTGRES_DB\" '$database_template_prefix""$save_template'" &&
		echo "Template saved" ||
		echo "Warning: failed to create template datatbase" 1>&2
fi
